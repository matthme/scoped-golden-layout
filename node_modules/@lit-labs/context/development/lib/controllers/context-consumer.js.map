{"version":3,"file":"context-consumer.js","sourceRoot":"","sources":["../../../src/lib/controllers/context-consumer.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAC,mBAAmB,EAAC,MAAM,6BAA6B,CAAC;AAIhE;;;;;;;GAOG;AACH,MAAM,OAAO,eAAe;IAS1B,YACY,IAAiB,EACnB,OAAU,EACV,QAAgE,EAChE,YAAqB,KAAK;QAHxB,SAAI,GAAJ,IAAI,CAAa;QACnB,YAAO,GAAP,OAAO,CAAG;QACV,aAAQ,GAAR,QAAQ,CAAwD;QAChE,cAAS,GAAT,SAAS,CAAiB;QAR5B,aAAQ,GAAG,KAAK,CAAC;QAElB,UAAK,GAAoB,SAAS,CAAC;QAQxC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IAID,aAAa;QACX,IAAI,CAAC,eAAe,EAAE,CAAC;IACzB,CAAC;IACD,gBAAgB;QACd,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,IAAI,CAAC,WAAW,EAAE,CAAC;YACnB,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;SAC9B;IACH,CAAC;IAEO,eAAe;QACrB,IAAI,CAAC,IAAI,CAAC,aAAa,CACrB,IAAI,mBAAmB,CACrB,IAAI,CAAC,OAAO,EACZ,CAAC,KAAK,EAAE,WAAW,EAAE,EAAE;YACrB,6FAA6F;YAC7F,IAAI,IAAI,CAAC,WAAW,EAAE;gBACpB,4EAA4E;gBAC5E,IAAI,IAAI,CAAC,WAAW,KAAK,WAAW,EAAE;oBACpC,2BAA2B;oBAC3B,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;oBACtB,IAAI,CAAC,WAAW,EAAE,CAAC;iBACpB;gBACD,4DAA4D;gBAC5D,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;oBACnB,IAAI,CAAC,WAAW,EAAE,CAAC;iBACpB;aACF;YAED,kEAAkE;YAClE,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACnB,8DAA8D;YAC9D,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;YAE1B,0EAA0E;YAC1E,wBAAwB;YACxB,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,SAAS,EAAE;gBACpC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;gBACrB,IAAI,IAAI,CAAC,QAAQ,EAAE;oBACjB,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;iBACnC;aACF;YAED,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QACjC,CAAC,EACD,IAAI,CAAC,SAAS,CACf,CACF,CAAC;IACJ,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {ContextRequestEvent} from '../context-request-event.js';\nimport {Context, ContextType} from '../create-context.js';\nimport {ReactiveController, ReactiveElement} from 'lit';\n\n/**\n * ContextConsumer is a ReactiveController which binds a custom-element's\n * lifecycle to the Context API. When an element is connected to the DOM it\n * will emit the context-request event, invoking the callback set on the\n * controller when the context request is satisfied. It will also call\n * the dispose method provided by the Context API when the element is\n * disconnected.\n */\nexport class ContextConsumer<\n  C extends Context<unknown, unknown>,\n  HostElement extends ReactiveElement\n> implements ReactiveController\n{\n  private provided = false;\n\n  public value?: ContextType<C> = undefined;\n\n  constructor(\n    protected host: HostElement,\n    private context: C,\n    private callback?: (value: ContextType<C>, dispose?: () => void) => void,\n    private subscribe: boolean = false\n  ) {\n    this.host.addController(this);\n  }\n\n  private unsubscribe?: () => void;\n\n  hostConnected(): void {\n    this.dispatchRequest();\n  }\n  hostDisconnected(): void {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n      this.unsubscribe = undefined;\n    }\n  }\n\n  private dispatchRequest() {\n    this.host.dispatchEvent(\n      new ContextRequestEvent(\n        this.context,\n        (value, unsubscribe) => {\n          // some providers will pass an unsubscribe function indicating they may provide future values\n          if (this.unsubscribe) {\n            // if the unsubscribe function changes this implies we have changed provider\n            if (this.unsubscribe !== unsubscribe) {\n              // cleanup the old provider\n              this.provided = false;\n              this.unsubscribe();\n            }\n            // if we don't support subscription, immediately unsubscribe\n            if (!this.subscribe) {\n              this.unsubscribe();\n            }\n          }\n\n          // store the value so that it can be retrieved from the controller\n          this.value = value;\n          // schedule an update in case this value is used in a template\n          this.host.requestUpdate();\n\n          // only invoke callback if we are either expecting updates or have not yet\n          // been provided a value\n          if (!this.provided || this.subscribe) {\n            this.provided = true;\n            if (this.callback) {\n              this.callback(value, unsubscribe);\n            }\n          }\n\n          this.unsubscribe = unsubscribe;\n        },\n        this.subscribe\n      )\n    );\n  }\n}\n"]}
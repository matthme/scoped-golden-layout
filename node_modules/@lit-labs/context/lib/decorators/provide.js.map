{"version":3,"file":"provide.js","sources":["../../src/lib/decorators/provide.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {ReactiveElement} from '@lit/reactive-element';\nimport {decorateProperty} from '@lit/reactive-element/decorators/base.js';\nimport {Context} from '../create-context.js';\nimport {ContextProvider} from '../controllers/context-provider.js';\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\n/**\n * A property decorator that adds a ContextConsumer controller to the component\n * which will try and retrieve a value for the property via the Context API.\n *\n * @param context A Context identifier value created via `createContext`\n * @param multiple An optional boolean which when true allows the value to be updated\n *   multiple times.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * @example\n *\n * ```ts\n * import {consume} from '@lit-labs/context';\n * import {loggerContext} from 'community-protocols/logger';\n *\n * class MyElement {\n *   @provide(loggerContext)\n *   logger;\n *\n *   doThing() {\n *     this.logger.log('thing was done');\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function provide<ValueType>({\n  context: context,\n}: {\n  context: Context<unknown, ValueType>;\n}): <K extends PropertyKey>(\n  protoOrDescriptor: ReactiveElement & Record<K, ValueType>,\n  name?: K\n  // Note TypeScript requires the return type to be `void|any`\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n) => void | any {\n  return decorateProperty({\n    finisher: (ctor: typeof ReactiveElement, name: PropertyKey) => {\n      const controllerMap = new WeakMap();\n      ctor.addInitializer((element: ReactiveElement): void => {\n        controllerMap.set(element, new ContextProvider(element, context));\n      });\n      // proxy any existing setter for this property and use it to\n      // notify the controller of an updated value\n      const descriptor = Object.getOwnPropertyDescriptor(ctor.prototype, name);\n      const oldSetter = descriptor?.set;\n      const newDescriptor = {\n        ...descriptor,\n        set: function (value: ValueType) {\n          controllerMap.get(this)?.setValue(value);\n          if (oldSetter) {\n            oldSetter.call(this, value);\n          }\n        },\n      };\n      Object.defineProperty(ctor.prototype, name, newDescriptor);\n    },\n  });\n}\n"],"names":["provide","context","decorateProperty","finisher","ctor","name","controllerMap","WeakMap","addInitializer","element","set","ContextProvider","descriptor","Object","getOwnPropertyDescriptor","prototype","oldSetter","newDescriptor","value","_a","get","this","setValue","call","defineProperty"],"mappings":";;;;;YA6CgBA,GACdC,QAASA,IAST,OAAOC,EAAiB,CACtBC,SAAU,CAACC,EAA8BC,KACvC,MAAMC,EAAgB,IAAIC,QAC1BH,EAAKI,gBAAgBC,IACnBH,EAAcI,IAAID,EAAS,IAAIE,EAAgBF,EAASR,GAAS,IAInE,MAAMW,EAAaC,OAAOC,yBAAyBV,EAAKW,UAAWV,GAC7DW,EAAYJ,aAAA,EAAAA,EAAYF,IACxBO,EAAgB,IACjBL,EACHF,IAAK,SAAUQ,SACU,QAAvBC,EAAAb,EAAcc,IAAIC,aAAK,IAAAF,GAAAA,EAAEG,SAASJ,GAC9BF,GACFA,EAAUO,KAAKF,KAAMH,EAExB,GAEHL,OAAOW,eAAepB,EAAKW,UAAWV,EAAMY,EAAc,GAGhE"}
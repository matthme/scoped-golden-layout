{"version":3,"file":"context-consumer.js","sources":["../../src/lib/controllers/context-consumer.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {ContextRequestEvent} from '../context-request-event.js';\nimport {Context, ContextType} from '../create-context.js';\nimport {ReactiveController, ReactiveElement} from 'lit';\n\n/**\n * ContextConsumer is a ReactiveController which binds a custom-element's\n * lifecycle to the Context API. When an element is connected to the DOM it\n * will emit the context-request event, invoking the callback set on the\n * controller when the context request is satisfied. It will also call\n * the dispose method provided by the Context API when the element is\n * disconnected.\n */\nexport class ContextConsumer<\n  C extends Context<unknown, unknown>,\n  HostElement extends ReactiveElement\n> implements ReactiveController\n{\n  private provided = false;\n\n  public value?: ContextType<C> = undefined;\n\n  constructor(\n    protected host: HostElement,\n    private context: C,\n    private callback?: (value: ContextType<C>, dispose?: () => void) => void,\n    private subscribe: boolean = false\n  ) {\n    this.host.addController(this);\n  }\n\n  private unsubscribe?: () => void;\n\n  hostConnected(): void {\n    this.dispatchRequest();\n  }\n  hostDisconnected(): void {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n      this.unsubscribe = undefined;\n    }\n  }\n\n  private dispatchRequest() {\n    this.host.dispatchEvent(\n      new ContextRequestEvent(\n        this.context,\n        (value, unsubscribe) => {\n          // some providers will pass an unsubscribe function indicating they may provide future values\n          if (this.unsubscribe) {\n            // if the unsubscribe function changes this implies we have changed provider\n            if (this.unsubscribe !== unsubscribe) {\n              // cleanup the old provider\n              this.provided = false;\n              this.unsubscribe();\n            }\n            // if we don't support subscription, immediately unsubscribe\n            if (!this.subscribe) {\n              this.unsubscribe();\n            }\n          }\n\n          // store the value so that it can be retrieved from the controller\n          this.value = value;\n          // schedule an update in case this value is used in a template\n          this.host.requestUpdate();\n\n          // only invoke callback if we are either expecting updates or have not yet\n          // been provided a value\n          if (!this.provided || this.subscribe) {\n            this.provided = true;\n            if (this.callback) {\n              this.callback(value, unsubscribe);\n            }\n          }\n\n          this.unsubscribe = unsubscribe;\n        },\n        this.subscribe\n      )\n    );\n  }\n}\n"],"names":["ContextConsumer","constructor","host","context","callback","subscribe","this","provided","value","undefined","addController","hostConnected","dispatchRequest","hostDisconnected","unsubscribe","dispatchEvent","ContextRequestEvent","requestUpdate"],"mappings":";;;;;SAkBaA,EASXC,YACYC,EACFC,EACAC,EACAC,GAAqB,GAHnBC,KAAIJ,KAAJA,EACFI,KAAOH,QAAPA,EACAG,KAAQF,SAARA,EACAE,KAASD,UAATA,EARFC,KAAQC,UAAG,EAEZD,KAAKE,WAAoBC,EAQ9BH,KAAKJ,KAAKQ,cAAcJ,KACzB,CAIDK,gBACEL,KAAKM,iBACN,CACDC,mBACMP,KAAKQ,cACPR,KAAKQ,cACLR,KAAKQ,iBAAcL,EAEtB,CAEOG,kBACNN,KAAKJ,KAAKa,cACR,IAAIC,EACFV,KAAKH,SACL,CAACK,EAAOM,KAEFR,KAAKQ,cAEHR,KAAKQ,cAAgBA,IAEvBR,KAAKC,UAAW,EAChBD,KAAKQ,eAGFR,KAAKD,WACRC,KAAKQ,eAKTR,KAAKE,MAAQA,EAEbF,KAAKJ,KAAKe,gBAILX,KAAKC,WAAYD,KAAKD,YACzBC,KAAKC,UAAW,EACZD,KAAKF,UACPE,KAAKF,SAASI,EAAOM,IAIzBR,KAAKQ,YAAcA,CAAW,GAEhCR,KAAKD,WAGV"}
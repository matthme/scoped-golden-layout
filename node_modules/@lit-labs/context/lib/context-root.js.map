{"version":3,"file":"context-root.js","sources":["../src/lib/context-root.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {Context} from './create-context.js';\nimport {ContextRequest, ContextRequestEvent} from './context-request-event.js';\nimport {ContextProviderEvent} from './controllers/context-provider.js';\n\ntype UnknownContextKey = Context<unknown, unknown>;\n\n/**\n * A context request, with associated source element, with all objects as weak references.\n */\ntype PendingContextRequest = Omit<\n  ContextRequest<UnknownContextKey>,\n  'context' | 'subscribe'\n> & {element: HTMLElement};\n\n/**\n * A ContextRoot can be used to gather unsatisfied context requests and redispatch these\n * requests when new providers which satisfy matching context keys are available.\n */\nexport class ContextRoot {\n  private pendingContextRequests = new Map<\n    UnknownContextKey,\n    Set<PendingContextRequest>\n  >();\n\n  /**\n   * Attach the ContextRoot to a given element to intercept `context-request` and\n   * `context-provider` events.\n   *\n   * @param element an element to add event listeners to\n   */\n  public attach(element: HTMLElement): void {\n    element.addEventListener('context-request', this.onContextRequest);\n    element.addEventListener('context-provider', this.onContextProvider);\n  }\n\n  /**\n   * Removes the ContextRoot event listeners from a given element.\n   *\n   * @param element an element from which to remove event listeners\n   */\n  public detach(element: HTMLElement): void {\n    element.removeEventListener('context-request', this.onContextRequest);\n    element.removeEventListener('context-provider', this.onContextProvider);\n  }\n\n  private onContextProvider = (\n    ev: ContextProviderEvent<Context<unknown, unknown>>\n  ) => {\n    const pendingRequests = this.pendingContextRequests.get(ev.context);\n    if (!pendingRequests) {\n      return; // no pending requests for this provider at this time\n    }\n\n    // clear our list, any still unsatisfied requests will re-add themselves\n    this.pendingContextRequests.delete(ev.context);\n\n    // loop over all pending requests and re-dispatch them from their source\n    pendingRequests.forEach((request) => {\n      const element = request.element;\n      const callback = request.callback;\n      // redispatch if we still have all the parts of the request\n      if (element) {\n        element.dispatchEvent(\n          new ContextRequestEvent(ev.context, callback, true)\n        );\n      }\n    });\n  };\n\n  private onContextRequest = (\n    ev: ContextRequestEvent<Context<unknown, unknown>>\n  ) => {\n    // events that are not subscribing should not be captured\n    if (!ev.subscribe) {\n      return;\n    }\n    // store a weakref to this element under the context key\n    const request: PendingContextRequest = {\n      element: ev.target as HTMLElement,\n      callback: ev.callback,\n    };\n    let pendingContextRequests = this.pendingContextRequests.get(ev.context);\n    if (!pendingContextRequests) {\n      pendingContextRequests = new Set();\n      this.pendingContextRequests.set(ev.context, pendingContextRequests);\n    }\n    // NOTE: if the element is connected multiple times it will add itself\n    // to this set multiple times since the set identify of the request\n    // object will be unique each time.\n    pendingContextRequests.add(request);\n  };\n}\n"],"names":["ContextRoot","constructor","this","pendingContextRequests","Map","onContextProvider","ev","pendingRequests","get","context","delete","forEach","request","element","callback","dispatchEvent","ContextRequestEvent","onContextRequest","subscribe","target","Set","set","add","attach","addEventListener","detach","removeEventListener"],"mappings":";;;;;SAwBaA,EAAbC,cACUC,KAAAC,uBAAyB,IAAIC,IA0B7BF,KAAAG,kBACNC,IAEA,MAAMC,EAAkBL,KAAKC,uBAAuBK,IAAIF,EAAGG,SACtDF,IAKLL,KAAKC,uBAAuBO,OAAOJ,EAAGG,SAGtCF,EAAgBI,SAASC,IACvB,MAAMC,EAAUD,EAAQC,QAClBC,EAAWF,EAAQE,SAErBD,GACFA,EAAQE,cACN,IAAIC,EAAoBV,EAAGG,QAASK,GAAU,GAEjD,IACD,EAGIZ,KAAAe,iBACNX,IAGA,IAAKA,EAAGY,UACN,OAGF,MAAMN,EAAiC,CACrCC,QAASP,EAAGa,OACZL,SAAUR,EAAGQ,UAEf,IAAIX,EAAyBD,KAAKC,uBAAuBK,IAAIF,EAAGG,SAC3DN,IACHA,EAAyB,IAAIiB,IAC7BlB,KAAKC,uBAAuBkB,IAAIf,EAAGG,QAASN,IAK9CA,EAAuBmB,IAAIV,EAAQ,CAEtC,CA7DQW,OAAOV,GACZA,EAAQW,iBAAiB,kBAAmBtB,KAAKe,kBACjDJ,EAAQW,iBAAiB,mBAAoBtB,KAAKG,kBACnD,CAOMoB,OAAOZ,GACZA,EAAQa,oBAAoB,kBAAmBxB,KAAKe,kBACpDJ,EAAQa,oBAAoB,mBAAoBxB,KAAKG,kBACtD"}
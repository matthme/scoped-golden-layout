{"version":3,"file":"consume.js","sources":["../../src/lib/decorators/consume.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {ReactiveElement} from '@lit/reactive-element';\nimport {decorateProperty} from '@lit/reactive-element/decorators/base.js';\nimport {ContextConsumer} from '../controllers/context-consumer.js';\nimport {Context} from '../create-context.js';\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\n/**\n * A property decorator that adds a ContextConsumer controller to the component\n * which will try and retrieve a value for the property via the Context API.\n *\n * @param context A Context identifier value created via `createContext`\n * @param subscribe An optional boolean which when true allows the value to be updated\n *   multiple times.\n *\n * @example\n *\n * ```ts\n * import {consume} from '@lit-labs/context';\n * import {loggerContext, Logger} from 'community-protocols/logger';\n *\n * class MyElement {\n *   @consume({context: loggerContext})\n *   logger?: Logger;\n *\n *   doThing() {\n *     this.logger!.log('thing was done');\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function consume<ValueType>({\n  context: context,\n  subscribe,\n}: {\n  context: Context<unknown, ValueType>;\n  subscribe?: boolean;\n}): <K extends PropertyKey>(\n  // Partial<> allows for providing the value to an optional field\n  protoOrDescriptor: ReactiveElement & Partial<Record<K, ValueType>>,\n  name?: K\n  // Note TypeScript requires the return type to be `void|any`\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n) => void | any {\n  return decorateProperty({\n    finisher: (ctor: typeof ReactiveElement, name: PropertyKey) => {\n      ctor.addInitializer((element: ReactiveElement): void => {\n        new ContextConsumer(\n          element,\n          context,\n          (value: ValueType) => {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any -- have to force the property on the type\n            (element as any)[name] = value;\n          },\n          subscribe\n        );\n      });\n    },\n  });\n}\n"],"names":["consume","context","subscribe","decorateProperty","finisher","ctor","name","addInitializer","element","ContextConsumer","value"],"mappings":";;;;;GA2CM,SAAUA,GACdC,QAASA,EAAOC,UAChBA,IAWA,OAAOC,EAAiB,CACtBC,SAAU,CAACC,EAA8BC,KACvCD,EAAKE,gBAAgBC,IACnB,IAAIC,EACFD,EACAP,GACCS,IAEEF,EAAgBF,GAAQI,CAAK,GAEhCR,EACD,GACD,GAGR"}